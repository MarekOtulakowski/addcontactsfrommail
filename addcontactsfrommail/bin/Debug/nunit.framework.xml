<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.framework</name>
    </assembly>
    <members>
        <member name="T:NUnit.Env">
            <summary>
            Env is a static class that provides some of the features of
            System.Environment that are not available under all runtimes
            </summary>
        </member>
        <member name="F:NUnit.Env.NewLine">
            <summary>
            The newline sequence in the current environmemt.
            </summary>
        </member>
        <member name="F:NUnit.Env.DocumentFolder">
            <summary>
            Path to the 'My Documents' folder
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.MsgUtils">
            <summary>
            Static methods used in creating messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.ELLIPSIS">
            <summary>
            Static string used when strings are clipped
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetTypeRepresentation(System.Object)">
            <summary>
            Returns the representation of a type as used in NUnitLite.
            This is the same as Type.ToString() except for arrays,
            which are displayed with their declared sizes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.EscapeControlChars(System.String)">
            <summary>
            Converts any control characters in a string 
            to their escaped representation.
            </summary>
            <param name="s">The string to be converted</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesAsString(System.Int32[])">
            <summary>
            Return the a string representation for a set of indices into an array
            </summary>
            <param name="indices">Array of indices for which a string is needed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesFromCollectionIndex(System.Collections.ICollection,System.Int32)">
            <summary>
            Get an array of indices representing the point in a collection or
            array corresponding to a single int index into the collection.
            </summary>
            <param name="collection">The collection to which the indices apply</param>
            <param name="index">Index in the collection</param>
            <returns>Array of indices</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipString(System.String,System.Int32,System.Int32)">
            <summary>
            Clip a string to a given length, starting at a particular offset, returning the clipped
            string with ellipses representing the removed parts
            </summary>
            <param name="s">The string to be clipped</param>
            <param name="maxStringLength">The maximum permitted length of the result string</param>
            <param name="clipStart">The point at which to start clipping</param>
            <returns>The clipped string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipExpectedAndActual(System.String@,System.String@,System.Int32,System.Int32)">
            <summary>
            Clip the expected and actual strings in a coordinated fashion, 
            so that they may be displayed together.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="maxDisplayLength"></param>
            <param name="mismatch"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FindMismatchPosition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="istart">The index in the strings at which comparison should start</param>
            <param name="ignoreCase">Boolean indicating whether case should be ignored</param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.TypeConstraint">
            <summary>
            TypeConstraint is the abstract base for constraints
            that take a Type as their expected value.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint">
            <summary>
            The Constraint class is the base of all built-in constraints
            within NUnit. It provides the operator overloads used to combine 
            constraints.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IResolveConstraint">
            <summary>
            The IConstraintExpression interface is implemented by all
            complete and resolvable constraints and expressions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IResolveConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.UNSET">
            <summary>
            Static UnsetObject used to detect derived constraints
            failing to set the actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.actual">
            <summary>
            The actual value being tested against a constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.displayName">
            <summary>
            The display name of this Constraint for use by ToString()
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.argcnt">
            <summary>
            Argument fields used by ToString();
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.builder">
            <summary>
            The builder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor">
            <summary>
            Construct a constraint with no arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object)">
            <summary>
            Construct a constraint with one argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object,System.Object)">
            <summary>
            Construct a constraint with two arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.SetBuilder(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Sets the ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the failure message to the MessageWriter provided
            as an argument. The default implementation simply passes
            the constraint and the actual value to the writer, which
            then displays the constraint description and the value.
            
            Constraints that need to provide additional details,
            such as where the error occured can override this.
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Test whether the constraint is satisfied by an
            ActualValueDelegate that returns the value to be tested.
            The default implementation simply evaluates the delegate
            but derived classes may override it to provide for delayed 
            processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ToString">
            <summary>
            Default override of ToString returns the constraint DisplayName
            followed by any arguments within angle brackets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseAnd(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseOr(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_LogicalNot(NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32)">
            <summary>
            Returns a DelayedConstraint with the specified delay time.
            </summary>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32,System.Int32)">
            <summary>
            Returns a DelayedConstraint with the specified delay time
            and polling interval.
            </summary>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <param name="pollingInterval">The interval at which to test the constraint.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.And">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.With">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Or">
            <summary>
            Returns a ConstraintExpression by appending Or
            to the current constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint.UnsetObject">
            <summary>
            Class used to detect any derived constraints
            that fail to set the actual value in their
            Matches override.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.expectedType">
            <summary>
            The expected Type used by the constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.#ctor(System.Type)">
            <summary>
            Construct a TypeConstraint for a given Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. TypeConstraints override this method to write
            the name of the type.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactTypeConstraint">
            <summary>
            ExactTypeConstraint is used to test that an object
            is of the exact type provided in the constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an ExactTypeConstraint for a given Type
            </summary>
            <param name="type">The expected Type.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.Matches(System.Object)">
            <summary>
            Test that an object is of the exact type specified
            </summary>
            <param name="actual">The actual value.</param>
            <returns>True if the tested object is of the exact type provided, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.InstanceOfTypeConstraint">
            <summary>
            InstanceOfTypeConstraint is used to test that an object
            is of the same type provided or derived from it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an InstanceOfTypeConstraint for the type provided
            </summary>
            <param name="type">The expected Type</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.Matches(System.Object)">
            <summary>
            Test whether an object is of the specified type or a derived type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object is of the provided type or derives from it, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableFromConstraint">
            <summary>
            AssignableFromConstraint is used to test that an object
            can be assigned from a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableFromConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.Matches(System.Object)">
            <summary>
            Test whether an object can be assigned from the specified type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object can be assigned a value of the expected Type, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableToConstraint">
            <summary>
            AssignableToConstraint is used to test that an object
            can be assigned to a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableToConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.Matches(System.Object)">
            <summary>
            Test whether an object can be assigned to the specified type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object can be assigned a value of the expected Type, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ToleranceMode">
            <summary>
            Modes in which the tolerance value for a comparison can
            be interpreted.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.None">
            <summary>
            The tolerance was created with a value, without specifying 
            how the value would be used. This is used to prevent setting
            the mode more than once and is generally changed to Linear
            upon execution of the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Linear">
            <summary>
            The tolerance is used as a numeric range within which
            two compared values are considered to be equal.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Percent">
            <summary>
            Interprets the tolerance as the percentage by which
            the two compared values my deviate from each other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Ulps">
            <summary>
            Compares two values based in their distance in
            representable numbers.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Tolerance">
            <summary>
            The Tolerance class generalizes the notion of a tolerance
            within which an equality test succeeds. Normally, it is
            used with numeric types, but it can be used with any
            type that supports taking a difference between two 
            objects and comparing that difference to a value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object)">
            <summary>
            Constructs a linear tolerance of a specdified amount
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object,NUnit.Framework.Constraints.ToleranceMode)">
            <summary>
            Constructs a tolerance given an amount and ToleranceMode
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.CheckLinearAndNumeric">
            <summary>
            Tests that the current Tolerance is linear with a 
            numeric value, throwing an exception if it is not.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Empty">
            <summary>
            Returns an empty Tolerance object, equivalent to 
            specifying an exact match.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Mode">
            <summary>
            Gets the ToleranceMode for the current Tolerance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Value">
            <summary>
            Gets the value of the current Tolerance instance.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Percent">
            <summary>
            Returns a new tolerance, using the current amount as a percentage.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ulps">
            <summary>
            Returns a new tolerance, using the current amount in Ulps.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Days">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of days.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Hours">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of hours.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Minutes">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of minutes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Seconds">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of seconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Milliseconds">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of milliseconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ticks">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of clock ticks.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.IsEmpty">
            <summary>
            Returns true if the current tolerance is empty.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.StringConstraint">
            <summary>
            StringConstraint is the abstract base for constraints
            that operate on strings. It supports the IgnoreCase
            modifier for string operations.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.expected">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.caseInsensitive">
            <summary>
            Indicates whether tests should be case-insensitive
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.#ctor(System.String)">
            <summary>
            Constructs a StringConstraint given an expected value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.StringConstraint.IgnoreCase">
            <summary>
            Modify the constraint to ignore case in matching.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyStringConstraint">
            <summary>
            EmptyStringConstraint tests whether a string is empty.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullOrEmptyStringConstraint">
            <summary>
            NullEmptyStringConstraint tests whether a string is either null or empty.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.#ctor">
            <summary>
            Constructs a new NullOrEmptyStringConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubstringConstraint">
            <summary>
            SubstringConstraint can test whether a string contains
            the expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubstringConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.StartsWithConstraint">
            <summary>
            StartsWithConstraint can test whether a string starts
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StartsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EndsWithConstraint">
            <summary>
            EndsWithConstraint can test whether a string ends
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EndsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.RegexConstraint">
            <summary>
            RegexConstraint can test whether a string matches
            the pattern provided.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RegexConstraint"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SameAsConstraint">
            <summary>
            SameAsConstraint tests whether an object is identical to
            the object passed to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SameAsConstraint"/> class.
            </summary>
            <param name="expected">The expected object.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ResolvableConstraintExpression">
            <summary>
            ResolvableConstraintExpression is used to represent a compound
            constraint being constructed at a point where the last operator
            may either terminate the expression or may have additional 
            qualifying constraints added to it. 
            
            It is used, for example, for a Property element or for
            an Exception element, either of which may be optionally
            followed by constraints that apply to the property or 
            exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpression">
            <summary>
            ConstraintExpression represents a compound constraint in the 
            process of being constructed from a series of syntactic elements.
            
            Individual elements are appended to the expression as they are
            reognized. Once an actual Constraint is appended, the expression
            returns a resolvable Constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpressionBase">
            <summary>
            ConstraintExpressionBase is the abstract base class for the 
            generated ConstraintExpression class, which represents a 
            compound constraint in the process of being constructed 
            from a series of syntactic elements.
            
            NOTE: ConstraintExpressionBase is aware of some of its
            derived classes, which is an apparent violation of 
            encapsulation. Ideally, these classes would be a 
            single class, but they must be separated in order to
            allow parts to be generated under .NET 1.x and to
            provide proper user feedback in syntactically 
            aware IDEs.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintExpressionBase.builder">
            <summary>
            The ConstraintBuilder holding the elements recognized so far
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.ToString">
            <summary>
            Returns a string representation of the expression as it
            currently stands. This should only be used for testing,
            since it has the side-effect of resolving the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends an operator to the expression and returns the
            resulting expression itself.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.SelfResolvingOperator)">
            <summary>
            Appends a self-resolving operator to the expression and
            returns a new ResolvableConstraintExpression.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends a constraint to the expression and returns that
            constraint, which is associated with the current state
            of the expression being built.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches``1(System.Predicate{``0})">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOfType(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOfType``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.With">
            <summary>
            With is currently a NOP - reserved for future use.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor">
            <summary>
            Create a new instance of ResolvableConstraintExpression
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Create a new instance of ResolvableConstraintExpression,
            passing in a pre-populated ConstraintBuilder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.NUnit#Framework#Constraints#IResolveConstraint#Resolve">
            <summary>
            Resolve the current expression to a Constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.And">
            <summary>
            Appends an And Operator to the expression
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.Or">
            <summary>
            Appends an Or operator to the expression.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyExistsConstraint">
            <summary>
            PropertyExistsConstraint tests that a named property
            exists on the object provided through Match.
            
            Originally, PropertyConstraint provided this feature
            in addition to making optional tests on the vaue
            of the property. The two constraints are now separate.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyExistConstraint"/> class.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.Matches(System.Object)">
            <summary>
            Test whether the property exists for a given object
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.ToString">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyConstraint">
            <summary>
            PropertyConstraint extracts a named property and uses
            its value as the actual value for a chained constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixConstraint">
            <summary>
            Abstract base class used for prefixes
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PrefixConstraint.baseConstraint">
            <summary>
            The base constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct given a base constraint
            </summary>
            <param name="resolvable"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.#ctor(System.String,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseConstraint">The constraint to apply to the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.ToString">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotConstraint">
            <summary>
            NotConstraint negates the effect of some other constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NotConstraint"/> class.
            </summary>
            <param name="baseConstraint">The base constraint to be negated.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllItemsConstraint">
            <summary>
            AllItemsConstraint applies another constraint to each
            item in a collection, succeeding if they all succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct an AllItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeItemsConstraint">
            <summary>
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding if any item succeeds.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoItemConstraint">
            <summary>
            NoItemConstraint applies another constraint to each
            item in a collection, failing if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.Numerics">
            <summary>
            The Numerics class contains common operations on numeric values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a floating point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a fixed point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Test two numeric values for equality, performing the usual numeric 
            conversions and using a provided or default tolerance. If the tolerance 
            provided is Empty, this method may set it to a default tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="tolerance">A reference to the tolerance in effect</param>
            <returns>True if the values are equal</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.Compare(System.Object,System.Object)">
            <summary>
            Compare two numeric values, performing the usual numeric conversions.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <returns>The relationship of the values to each other</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.MessageWriter">
            <summary>
            MessageWriter is the abstract base for classes that write
            constraint descriptions and messages in some form. The
            class has separate methods for writing various components
            of a message, allowing implementations to tailor the
            presentation as needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.#ctor">
            <summary>
            Construct a MessageWriter given a culture
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message.
            </summary>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the Expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in locating the point where the strings differ</param>
            <param name="clipping">If true, the strings should be clipped to fit the line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteModifier(System.String)">
            <summary>
            Writes the text for a modifier
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteCollectionElements(System.Collections.ICollection,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.MessageWriter.MaxLineLength">
            <summary>
            Abstract method to get the max line length
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics">
            <summary>Helper routines for working with floating point numbers</summary>
            <remarks>
              <para>
                The floating point comparison code is based on this excellent article:
                http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
              </para>
              <para>
                "ULP" means Unit in the Last Place and in the context of this library refers to
                the distance between two adjacent floating point numbers. IEEE floating point
                numbers can only represent a finite subset of natural numbers, with greater
                accuracy for smaller numbers and lower accuracy for very large numbers.
              </para>
              <para>
                If a comparison is allowed "2 ulps" of deviation, that means the values are
                allowed to deviate by up to 2 adjacent floating point values, which might be
                as low as 0.0000001 for small numbers or as high as 10.0 for large numbers.
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Single,System.Single,System.Int32)">
            <summary>Compares two floating point values for equality</summary>
            <param name="left">First floating point value to be compared</param>
            <param name="right">Second floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable floating point values that are allowed to
              be between the left and the right floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Floating point values can only represent a finite subset of natural numbers.
                For example, the values 2.00000000 and 2.00000024 can be stored in a float,
                but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible floating point values are between
                the left and the right number. If the number of possible values between both
                numbers is less than or equal to maxUlps, then the numbers are considered as
                being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Double,System.Double,System.Int64)">
            <summary>Compares two double precision floating point values for equality</summary>
            <param name="left">First double precision floating point value to be compared</param>
            <param name="right">Second double precision floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable double precision floating point values that are
              allowed to be between the left and the right double precision floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Double precision floating point values can only represent a limited series of
                natural numbers. For example, the values 2.0000000000000000 and 2.0000000000000004
                can be stored in a double, but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible double precision floating point
                values are between the left and the right number. If the number of possible
                values between both numbers is less than or equal to maxUlps, then the numbers
                are considered as being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsInt(System.Single)">
            <summary>
              Reinterprets the memory contents of a floating point value as an integer value
            </summary>
            <param name="value">
              Floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the floating point value interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsLong(System.Double)">
            <summary>
              Reinterprets the memory contents of a double precision floating point
              value as an integer value
            </summary>
            <param name="value">
              Double precision floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the double precision floating point value
              interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsFloat(System.Int32)">
            <summary>
              Reinterprets the memory contents of an integer as a floating point value
            </summary>
            <param name="value">Integer value whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer value interpreted as a floating point value
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsDouble(System.Int64)">
            <summary>
              Reinterprets the memory contents of an integer value as a double precision
              floating point value
            </summary>
            <param name="value">Integer whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer interpreted as a double precision
              floating point value
            </returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion">
            <summary>Union of a floating point variable and an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Float">
            <summary>The union's value as a floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Int">
            <summary>The union's value as an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.UInt">
            <summary>The union's value as an unsigned integer</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion">
            <summary>Union of a double precision floating point variable and a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Double">
            <summary>The union's value as a double precision floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Long">
            <summary>The union's value as a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.ULong">
            <summary>The union's value as an unsigned long</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyConstraint">
            <summary>
            EmptyConstraint tests a whether a string or collection is empty,
            postponing the decision about which test is applied until the
            type of the actual argument is known.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ContainsConstraint">
            <summary>
            ContainsConstraint tests a whether a string contains a substring
            or a collection contains an object. It postpones the decision of
            which test to use until the type of the actual argument is known.
            This allows testing whether a string is contained in a collection
            or as a substring of another string using the same syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ContainsConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ContainsConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryConstraint">
            <summary>
            BinaryConstraint is the abstract base of all constraints
            that combine two other constraints in some fashion.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.left">
            <summary>
            The first constraint being combined
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.right">
            <summary>
            The second constraint being combined
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a BinaryConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an AndConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.Matches(System.Object)">
            <summary>
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if the constraints both succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an OrConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.Matches(System.Object)">
            <summary>
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if either constraint succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.BasicConstraint">
            <summary>
            BasicConstraint is the abstract base for constraints that
            perform a simple comparison to a constant value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullConstraint">
            <summary>
            NullConstraint tests that the actual value is null
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NullConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TrueConstraint">
            <summary>
            TrueConstraint tests that the actual value is true
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrueConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FalseConstraint">
            <summary>
            FalseConstraint tests that the actual value is false
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FalseConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NaNConstraint">
            <summary>
            NaNConstraint tests that the actual value is a double or float NaN
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.Matches(System.Object)">
            <summary>
            Test that the actual value is an NaN
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a specified writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeExistsConstraint">
            <summary>
            AttributeExistsConstraint tests for the presence of a
            specified attribute on  a Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.#ctor(System.Type)">
            <summary>
            Constructs an AttributeExistsConstraint for a specific attribute Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.Matches(System.Object)">
            <summary>
            Tests whether the object provides the expected attribute.
            </summary>
            <param name="actual">A Type, MethodInfo, or other ICustomAttributeProvider</param>
            <returns>True if the expected attribute is present, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the description of the constraint to the specified writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeConstraint">
            <summary>
            AttributeConstraint tests that a specified attribute is present
            on a Type or other provider and that the value of the attribute
            satisfies some other constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.#ctor(System.Type,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Constructs an AttributeConstraint for a specified attriute
            Type and base constraint.
            </summary>
            <param name="type"></param>
            <param name="baseConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.Matches(System.Object)">
            <summary>
            Determines whether the Type or other provider has the 
            expected attribute and if its value matches the
            additional constraint specified.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes a description of the attribute to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the actual value supplied to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.ToString">
            <summary>
            Returns a string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter">
            <summary>
            ComparisonAdapter class centralizes all comparisons of
            values in NUnit, adapting to the use of any provided
            IComparer, IComparer&lt;T&gt; or Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ComparisonAdapter.Default">
            <summary>
            Gets the default ComparisonAdapter, which wraps an
            NUnitComparer object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a ComparisonAdapter for an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.DefaultComparisonAdapter.#ctor">
            <summary>
            Construct a default ComparisonAdapter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1">
            <summary>
            ComparisonAdapter&lt;T&gt; extends ComparisonAdapter and
            allows use of an IComparer&lt;T&gt; or Comparison&lt;T&gt;
            to actually perform the comparison.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct a ComparisonAdapter for an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.#ctor(System.Comparison{`0})">
            <summary>
            Construct a ComparisonAdapter for a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonConstraint">
            <summary>
            Abstract base class for constraints that compare values to
            determine if one is greater than, equal to or less than
            the other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.ltOK">
            <summary>
            If true, less than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.eqOK">
            <summary>
            if true, equal returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.gtOK">
            <summary>
            if true, greater than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.predicate">
            <summary>
            The predicate used as a part of the description
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.comparer">
            <summary>
            ComparisonAdapter to be used in making the comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComparisonConstraint"/> class.
            </summary>
            <param name="value">The value against which to make a comparison.</param>
            <param name="ltOK">if set to <c>true</c> less succeeds.</param>
            <param name="eqOK">if set to <c>true</c> equal succeeds.</param>
            <param name="gtOK">if set to <c>true</c> greater succeeds.</param>
            <param name="predicate">String used in describing the constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanConstraint">
            <summary>
            Tests whether a value is greater than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
            <summary>
            Tests whether a value is greater than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanConstraint">
            <summary>
            Tests whether a value is less than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint">
            <summary>
            Tests whether a value is less than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ActualValueDelegate">
            <summary>
            Delegate used to delay evaluation of the actual value
            to be used in evaluating a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder">
            <summary>
            ConstraintBuilder maintains the stacks that are used in
            processing a ConstraintExpression. An OperatorStack
            is used to hold operators that are waiting for their
            operands to be reognized. a ConstraintStack holds 
            input constraints as well as the results of each
            operator applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends the specified operator to the expression by first
            reducing the operator stack and then pushing the new
            operator on the stack.
            </summary>
            <param name="op">The operator to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends the specified constraint to the expresson by pushing
            it on the constraint stack.
            </summary>
            <param name="constraint">The constraint to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SetTopOperatorRightContext(System.Object)">
            <summary>
            Sets the top operator right context.
            </summary>
            <param name="rightContext">The right context.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ReduceOperatorStack(System.Int32)">
            <summary>
            Reduces the operator stack until the topmost item
            precedence is greater than or equal to the target precedence.
            </summary>
            <param name="targetPrecedence">The target precedence.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Resolve">
            <summary>
            Resolves this instance, returning a Constraint. If the builder
            is not currently in a resolvable state, an exception is thrown.
            </summary>
            <returns>The resolved constraint</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.IsResolvable">
            <summary>
            Gets a value indicating whether this instance is resolvable.
            </summary>
            <value>
            	<c>true</c> if this instance is resolvable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack">
            <summary>
            OperatorStack is a type-safe stack for holding ConstraintOperators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:OperatorStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Push(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Pushes the specified operator onto the stack.
            </summary>
            <param name="op">The op.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Pop">
            <summary>
            Pops the topmost operator from the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:OpStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Top">
            <summary>
            Gets the topmost operator without modifying the stack.
            </summary>
            <value>The top.</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack">
            <summary>
            ConstraintStack is a type-safe stack for holding Constraints
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Push(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Pushes the specified constraint. As a side effect,
            the constraint's builder field is set to the 
            ConstraintBuilder owning this stack.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Pop">
            <summary>
            Pops this topmost constrait from the stack.
            As a side effect, the constraint's builder
            field is set to null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:ConstraintStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Top">
            <summary>
            Gets the topmost constraint without modifying the stack.
            </summary>
            <value>The topmost constraint</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintOperator">
            <summary>
            The ConstraintOperator class is used internally by a
            ConstraintBuilder to represent an operator that 
            modifies or combines constraints. 
            
            Constraint operators use left and right precedence
            values to determine whether the top operator on the
            stack should be reduced before pushing a new operator.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.left_precedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.right_precedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftContext">
            <summary>
            The syntax element preceding this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightContext">
            <summary>
            The syntax element folowing this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftPrecedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightPrecedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixOperator">
            <summary>
            PrefixOperator takes a single constraint and modifies
            it's action in some way.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns the constraint created by applying this
            prefix to another constraint.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotOperator">
            <summary>
            Negates the test of the constraint it wraps.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.#ctor">
            <summary>
            Constructs a new NotOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a NotConstraint applied to its argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOperator">
            <summary>
            Abstract base for operators that indicate how to
            apply a constraint to items in a collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOperator.#ctor">
            <summary>
            Constructs a CollectionOperator
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllOperator">
            <summary>
            Represents a constraint that succeeds if all the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            they all succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeOperator">
            <summary>
            Represents a constraint that succeeds if any of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            any of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoneOperator">
            <summary>
            Represents a constraint that succeeds if none of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoneOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.WithOperator">
            <summary>
            Represents a constraint that simply wraps the
            constraint provided as an argument, without any
            further functionality, but which modifes the
            order of evaluation because of its precedence.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.#ctor">
            <summary>
            Constructor for the WithOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that wraps its argument
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SelfResolvingOperator">
            <summary>
            Abstract base class for operators that are able to reduce to a 
            constraint whether or not another syntactic element follows.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropOperator">
            <summary>
            Operator used to test for the presence of a named Property
            on an object and optionally apply further tests to the
            value of that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.#ctor(System.String)">
            <summary>
            Constructs a PropOperator for a particular named property
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PropOperator.Name">
            <summary>
            Gets the name of the property to which the operator applies
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeOperator">
            <summary>
            Operator that tests for the presence of a particular attribute
            on a type and optionally applies further tests to the attribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.#ctor(System.Type)">
            <summary>
            Construct an AttributeOperator for a particular Type
            </summary>
            <param name="type">The Type of attribute tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsOperator">
            <summary>
            Operator that tests that an exception is thrown and
            optionally applies further tests to the exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.#ctor">
            <summary>
            Construct a ThrowsOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryOperator">
            <summary>
            Abstract base class for all binary operators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Abstract method that produces a constraint by applying
            the operator to its left and right constraint arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.LeftPrecedence">
            <summary>
            Gets the left precedence of the operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.RightPrecedence">
            <summary>
            Gets the right precedence of the operator
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndOperator">
            <summary>
            Operator that requires both it's arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.#ctor">
            <summary>
            Construct an AndOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply the operator to produce an AndConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrOperator">
            <summary>
            Operator that requires at least one of it's arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.#ctor">
            <summary>
            Construct an OrOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply the operator to produce an OrConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraint">
            <summary>
            EqualConstraint is able to compare an actual value with the
            expected value provided in its constructor. Two objects are 
            considered equal if both are null, or if both have the same 
            value. NUnit has special semantics for some object types.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint.clipStrings">
            <summary>
            If true, strings in error messages will be clipped
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint.comparer">
            <summary>
            NUnitEqualityComparer used to test equality.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.EqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Within(System.Object)">
            <summary>
            Flag the constraint to use a tolerance when determining equality.
            </summary>
            <param name="amount">Tolerance value to be used</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Comparer(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a failure message. Overridden to provide custom 
            failure messages for EqualConstraint.
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write description of this constraint
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayCollectionDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Display the failure information for two collections that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection.</param>
            <param name="actual">The actual collection</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayCollectionTypesAndSizes(NUnit.Framework.Constraints.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Displays a single line showing the types and sizes of the expected
            and actual collections or arrays. If both are identical, the value is 
            only shown once.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection or array</param>
            <param name="actual">The actual collection or array</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayFailurePoint(NUnit.Framework.Constraints.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32,System.Int32)">
            <summary>
            Displays a single line showing the point in the expected and actual
            arrays at which the comparison failed. If the arrays have different
            structures or dimensions, both values are shown.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected array</param>
            <param name="actual">The actual array</param>
            <param name="failurePoint">Index of the failure point in the underlying collections</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.NoClip">
            <summary>
            Flag the constraint to suppress string clipping 
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.AsCollection">
            <summary>
            Flag the constraint to compare arrays as collections
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ulps">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a distance in representable values (see remarks).
            </summary>
            <returns>Self.</returns>
            <remarks>
            Ulp stands for "unit in the last place" and describes the minimum
            amount a given value can change. For any integers, an ulp is 1 whole
            digit. For floating point values, the accuracy of which is better
            for smaller numbers and worse for larger numbers, an ulp depends
            on the size of the number. Using ulps for comparison of floating
            point results instead of fixed tolerances is safer because it will
            automatically compensate for the added inaccuracy of larger numbers.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Percent">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a percentage that the actual values is allowed to deviate from
            the expected value.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Days">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in days.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Hours">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in hours.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Minutes">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in minutes.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Seconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in seconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Milliseconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in milliseconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ticks">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in clock ticks.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter">
            <summary>
            EqualityAdapter class handles all equality comparisons
            that use an IEqualityComparer, IEqualityComparer&lt;T&gt;
            or a ComparisonAdapter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Compares two objects, returning true if they are equal
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns an EqualityAdapter that wraps an IComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IEqualityComparer)">
            <summary>
            Returns an EqualityAdapter that wraps an IEqualityComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an EqualityAdapter that wraps an IEqualityComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an EqualityAdapter that wraps an IComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns an EqualityAdapter that wraps a Comparison&lt;T&gt;.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitComparer">
            <summary>
            NUnitComparer encapsulates NUnit's default behavior
            in comparing two objects.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitComparer.Default">
            <summary>
            Returns the default NUnitComparer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.RangeConstraint">
            <summary>
            RangeConstraint tests whethe two values are within a 
            specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.#ctor(System.IComparable,System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:RangeConstraint"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsConstraint">
            <summary>
            ThrowsConstraint is used to test the exception thrown by 
            a delegate by applying a constraint to it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:ThrowsConstraint"/> class,
            using a constraint to be applied to the exception.
            </summary>
            <param name="baseConstraint">A constraint to apply to the caught exception.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.Matches(System.Object)">
            <summary>
            Executes the code of the delegate and captures any exception.
            If a non-null base constraint was provided, it applies that
            constraint to the exception.
            </summary>
            <param name="actual">A delegate representing the code to be tested</param>
            <returns>True if an exception is thrown and the constraint succeeds, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Converts an ActualValueDelegate to a TestDelegate
            before calling the primary overload.
            </summary>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.ToString">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsConstraint.ActualException">
            <summary>
            Get the actual exception thrown - used by Assert.Throws.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsNothingConstraint">
            <summary>
            ThrowsNothingConstraint tests that a delegate does not
            throw an exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True if no exception is thrown, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.PathConstraint">
            <summary>
            PathConstraint serves as the abstract base of constraints
            that operate on paths and provides several helper methods.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PathConstraint.expected">
            <summary>
            The expected path used in the constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PathConstraint.caseInsensitive">
            <summary>
            Flag indicating whether a caseInsensitive comparison should be made
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.#ctor(System.String)">
            <summary>
            Construct a PathConstraint for a give expected path
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.ToString">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.Canonicalize(System.String)">
            <summary>
            Canonicalize the provided path
            </summary>
            <param name="path"></param>
            <returns>The path in standardized form</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSamePath(System.String,System.String)">
            <summary>
            Test whether two paths are the same
            </summary>
            <param name="path1">The first path</param>
            <param name="path2">The second path</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSamePathOrUnder(System.String,System.String)">
            <summary>
            Test whether one path is the same as or under another path
            </summary>
            <param name="path1">The first path - supposed to be the parent path</param>
            <param name="path2">The second path - supposed to be the child path</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.PathConstraint.IgnoreCase">
            <summary>
            Modifies the current instance to be case-insensitve
            and returns it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PathConstraint.RespectCase">
            <summary>
            Modifies the current instance to be case-sensitve
            and returns it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathConstraint">
            <summary>
            Summary description for SamePathConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SamePathConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathOrUnderConstraint">
            <summary>
            SamePathOrUnderConstraint tests that one path is under another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SamePathOrUnderConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinarySerializableConstraint">
            <summary>
            BinarySerializableConstraint tests whether 
            an object is serializable in binary format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.ToString">
            <summary>
            Returns the string representation
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint">
            <summary>
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            	<c>true</c> if the specified enumerable is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Protected method to be implemented by derived classes
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
            <summary>
            CollectionItemsEqualConstraint is the abstract base class for all
            collection constraints that apply some notion of item equality
            as a part of their operation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.ItemsEqual(System.Object,System.Object)">
            <summary>
            Compares two collection members for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Tally(System.Collections.IEnumerable)">
            <summary>
            Return a new CollectionTally for use in making tests
            </summary>
            <param name="c">The collection to be included in the tally</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.CollectionTally">
            <summary>
            CollectionTally counts (tallies) the number of
            occurences of each object in one or more enumerations.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.CollectionTally.#ctor(NUnit.Framework.Constraints.NUnitEqualityComparer,System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionTally object from a comparer and a collection
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.CollectionTally.TryRemove(System.Object)">
            <summary>
            Try to remove an object from the tally
            </summary>
            <param name="o">The object to remove</param>
            <returns>True if successful, false if the object was not found</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.CollectionTally.TryRemove(System.Collections.IEnumerable)">
            <summary>
            Try to remove a set of objects from the tally
            </summary>
            <param name="c">The objects to remove</param>
            <returns>True if successful, false if any object was not found</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.CollectionTally.Count">
            <summary>
            The number of objects remaining in the tally
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyCollectionConstraint">
            <summary>
            EmptyCollectionConstraint tests whether a collection is empty. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that the collection is empty
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.UniqueItemsConstraint">
            <summary>
            UniqueItemsConstraint tests whether all the items in a 
            collection are unique.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that all items are unique.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionContainsConstraint">
            <summary>
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionContainsConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected item is contained in the collection
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a descripton of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint">
            <summary>
            CollectionEquivalentCOnstraint is used to determine whether two
            collections are equivalent.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionEquivalentConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether two collections are equivalent
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSubsetConstraint">
            <summary>
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSubsetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a subset of</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a subset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOrderedConstraint">
            <summary>
            CollectionOrderedConstraint is used to test whether a collection is ordered.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.#ctor">
            <summary>
            Construct a CollectionOrderedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.By(System.String)">
            <summary>
            Modifies the constraint to test ordering by the value of
            a specified property and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the collection is ordered
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.ToString">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Descending">
            <summary>
             If used performs a reverse comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintFactory">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOfType(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOfType``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotContain(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotStartWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotEndWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotMatch(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer">
            <summary>
            NUnitEqualityComparer encapsulates NUnit's handling of
            equality tests between objects.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.caseInsensitive">
            <summary>
            If true, all string comparisons will ignore case
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.compareAsCollection">
            <summary>
            If true, arrays will be treated as collections, allowing
            those of different dimensions to be compared
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.tolerance">
            <summary>
            If non-zero, equality comparisons within the specified 
            tolerance will succeed.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.externalComparer">
            <summary>
            Comparison object used in comparisons for some constraints.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.ArraysEqual(System.Array,System.Array)">
            <summary>
            Helper method to compare two arrays
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.DirectoriesEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Method to compare two DirectoryInfo objects
            </summary>
            <param name="x">first directory to compare</param>
            <param name="y">second directory to compare</param>
            <returns>true if equivalent, false if not</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.Default">
            <summary>
            Returns the default NUnitEqualityComparer
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.IgnoreCase">
            <summary>
            Gets and sets a flag indicating whether case should
            be ignored in determining equality.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.CompareAsCollection">
            <summary>
            Gets and sets a flag indicating that arrays should be
            compared as collections, without regard to their shape.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.ExternalComparer">
            <summary>
            Gets and sets an external comparer to be used to
            test for equality. It is applied to members of
            collections, in place of NUnit's own logic.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.Tolerance">
            <summary>
            Gets and sets a tolerance used to compare objects of 
            certin types.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoints">
            <summary>
            Gets the list of failure points for the last Match performed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.XmlSerializableConstraint">
            <summary>
            BinarySerializableConstraint tests whether 
            an object is serializable in binary format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.ToString">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseAttribute">
            <summary>
            TestCaseAttribute is used to mark parameterized test cases
            and provide them with their arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestCaseData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return complete testcases for use by
            a parameterized test method.
            
            NOTE: This interface is used in both the framework
            and the core, even though that results in two different
            types. However, sharing the source code guarantees that
            the various implementations will be compatible and that
            the core is able to reflect successfully over the
            framework implementations of ITestCaseData.
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Result">
            <summary>
            Gets the expected result
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedException">
            <summary>
             Gets the expected exception Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedExceptionName">
            <summary>
            Gets the FullName of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedMessage">
            <summary>
            Gets  the expected message of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.MatchType">
            <summary>
             Gets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Description">
            <summary>
            Gets the description of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.IgnoreReason">
            <summary>
            Gets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object[])">
            <summary>
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object)">
            <summary>
            Construct a TestCaseAttribute with a single argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Arguments">
            <summary>
            Gets the list of arguments to a test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Result">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception.
            </summary>
            <value>The expected exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the name the expected exception.
            </summary>
            <value>The expected name of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message of the expected exception
            </summary>
            <value>The expected message of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignore">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignored">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IgnoreReason">
            <summary>
            Gets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="T:NUnit.Framework.TextMessageWriter">
            <summary>
            TextMessageWriter writes constraint descriptions and messages
            in displayable form as a text stream. It tailors the display
            of individual message components to form the standard message
            format of NUnit assertion failure messages.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.Pfx_Expected">
            <summary>
            Prefix used for the expected value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.Pfx_Actual">
            <summary>
            Prefix used for the actual value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.PrefixLength">
            <summary>
            Length of a message prefix
            </summary>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.#ctor">
            <summary>
            Construct a TextMessageWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.#ctor(System.String,System.Object[])">
            <summary>
            Construct a TextMessageWriter, specifying a user message
            and optional formatting arguments.
            </summary>
            <param name="userMessage"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in string comparisons</param>
            <param name="clipping">If true, clip the strings to fit the max line length</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteModifier(System.String)">
            <summary>
            Write the text for a modifier.
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteCollectionElements(System.Collections.ICollection,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Expected' line for a constraint
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(System.Object)">
            <summary>
            Write the generic 'Expected' line for a given value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Write the generic 'Expected' line for a given value
            and tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Actual' line for a constraint
            </summary>
            <param name="constraint">The constraint for which the actual value is to be written</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualLine(System.Object)">
            <summary>
            Write the generic 'Actual' line for a given value
            </summary>
            <param name="actual">The actual value causing a failure</param>
        </member>
        <member name="P:NUnit.Framework.TextMessageWriter.MaxLineLength">
            <summary>
            Gets or sets the maximum line length for this writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseSourceAttribute">
            <summary>
            FactoryAttribute indicates the source to be used to
            provide test cases for a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">An array of the names of the factories that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Attribute used to identify a method that is called 
            immediately after each test is run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SpecialValue">
            <summary>
            The SpecialValue enum is used to represent TestCase arguments
            that cannot be used as arguments to an Attribute.
            </summary>
        </member>
        <member name="F:NUnit.Framework.SpecialValue.Null">
            <summary>
            Null represents a null value, which cannot be used as an 
            argument to an attriute under .NET 1.x
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ListMapper">
            <summary>
            ListMapper is used to transform a collection used as an actual argument
            producing another collection to be used in the assertion.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ListMapper.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a ListMapper based on a collection
            </summary>
            <param name="original">The collection to be transformed</param>
        </member>
        <member name="M:NUnit.Framework.ListMapper.Property(System.String)">
            <summary>
            Produces a collection containing all the values of a property
            </summary>
            <param name="name">The collection of property values</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor">
            <summary>
            Constructs the attribute without giving a reason 
            for ignoring the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Reason">
            <summary>
            The reason for ignoring a test
            </summary>
        </member>
        <member name="T:NUnit.Framework.IExpectException">
            <summary>
            Interface implemented by a user fixture in order to
            validate any expected exceptions. It is only called
            for test methods marked with the ExpectedException
            attribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IExpectException.HandleException(System.Exception)">
            <summary>
            Method to handle an expected exception
            </summary>
            <param name="ex">The exception to be handled</param>
        </member>
        <member name="T:NUnit.Framework.GlobalSettings">
            <summary>
            GlobalSettings is a place for setting default values used
            by the framework in performing asserts.
            </summary>
        </member>
        <member name="F:NUnit.Framework.GlobalSettings.DefaultFloatingPointTolerance">
            <summary>
            Default tolerance for floating point equality
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionHelper">
            <summary>
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter names for constraints and
            asserts and avoiding conflict with the definition of 
            <see cref="T:NUnit.Framework.Is"/>, from which it inherits much of its
            behavior, in certain mock object frameworks.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)"/>
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)"/>
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])"/>
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to 
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to 
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to <see cref="M:NUnit.Framework.Assert.That(System.Boolean)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Map(System.Collections.ICollection)">
            <summary>
            Returns a ListMapper based on a collection.
            </summary>
            <param name="original">The original collection</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <example>
            [TestFixture]
            public class ExampleClass 
            {}
            </example>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor(System.Object[])">
            <summary>
            Construct with a object[] representing a set of arguments. 
            In .NET 2.0, the arguments may later be separated into
            type arguments and constructor arguments.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Arguments">
            <summary>
            The arguments originally provided to the attribute
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestFixtureAttribute"/> should be ignored.
            </summary>
            <value><c>true</c> if ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. May set Ignored as a side effect.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TypeArgs">
            <summary>
            Get or set the type arguments. If not set
            explicitly, any leading arguments that are
            Types are taken as type arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestDelegate">
            <summary>
            Delegate used by tests that execute code and
            capture any thrown exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assert">
            <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String)">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message and arguments 
            that are passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/>. 
            This is used by the other Assert functions. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message that is 
            passed in. This causes the test to be reported as ignored. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/>. 
            This causes the test to be reported as ignored. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as inconclusive.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message that is 
            passed in. This causes the test to be reported as inconclusive. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/>. 
            This causes the test to be reported as Inconclusive. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate does not throw an exception
            </summary>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String)">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double)">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double},System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double},System.String)">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double})">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String)">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNullOrEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is either null or equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNullOrEmpty(System.String,System.String)">
            <summary>
            Assert that a string is either null or equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNullOrEmpty(System.String)">
            <summary>
            Assert that a string is either null or equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNullOrEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is not null or empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Assert that a string is not null or empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNullOrEmpty(System.String)">
            <summary>
            Assert that a string is not null or empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AssertDoublesAreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Helper for Assert.AreEqual(double expected, double actual, ...)
            allowing code generation to work consistently.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="P:NUnit.Framework.Assert.Counter">
            <summary>
            Gets the number of assertions executed so far and 
            resets the counter to zero.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Contains">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Item(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Substring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Has">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Throws">
            <summary>
            Helper class with properties and methods that supply
            constraints that operate on exceptions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf(System.Type)">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf``1">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf(System.Type)">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf``1">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Exception">
            <summary>
            Creates a constraint specifying an expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InnerException">
            <summary>
            Creates a constraint specifying an exception with a given InnerException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.TargetInvocationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.ArgumentException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InvalidOperationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Nothing">
            <summary>
            Creates a constraint specifying that no exception is thrown
            </summary>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Attribute used to provide descriptive text about a 
            test case or fixture.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)">
            <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor">
            <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Properties">
            <summary>
            Gets the property dictionary for this attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct a description Attribute
            </summary>
            <param name="description">The text of the description</param>
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            ExpectedExceptionAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor">
            <summary>
            Constructor for a non-specific exception
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Constructor for a given type of exception
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String)">
            <summary>
            Constructor for a given exception name
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the full Type name of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message text
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.UserMessage">
            <summary>
            Gets or sets the user message displayed in case of failure
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.Handler">
            <summary>
             Gets the name of a method to be used as an exception handler
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseData">
            <summary>
            The TestCaseData class represents a set of arguments
            and other parameter info to be used for a parameterized
            test case. It provides a number of instance modifiers
            for use in initializing the test case.
            
            Note: Instance modifiers are getters that return
            the same instance after modifying it's state.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.arguments">
            <summary>
            The argument list to be provided to the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.result">
            <summary>
            The expected result to be returned
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.expectedExceptionType">
            <summary>
             The expected exception Type
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.expectedExceptionName">
            <summary>
            The FullName of the expected exception
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.testName">
            <summary>
            The name to be used for the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.description">
            <summary>
            The description of the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.isIgnored">
            <summary>
            If true, indicates that the test case is to be ignored
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.ignoreReason">
            <summary>
            The reason for ignoring a test case
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Returns(System.Object)">
            <summary>
            Sets the expected result for the test
            </summary>
            <param name="result">The expected result</param>
            <returns>A modified TestCaseData</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Throws(System.Type)">
            <summary>
            Sets the expected exception type for the test
            </summary>
            <param name="exceptionType">Type of the expected exception.</param>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Throws(System.String)">
            <summary>
            Sets the expected exception type for the test
            </summary>
            <param name="exceptionName">FullName of the expected exception.</param>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetName(System.String)">
            <summary>
            Sets the name of the test case
            </summary>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetDescription(System.String)">
            <summary>
            Sets the description for the test case
            being constructed.
            </summary>
            <param name="description">The description.</param>
            <returns>The modified TestCaseData instance.</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetCategory(System.String)">
            <summary>
            Applies a category to the test
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.String)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Int32)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Double)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore">
            <summary>
            Ignores this TestCase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore(System.String)">
            <summary>
            Ignores this TestCase, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Result">
            <summary>
            Gets the expected result
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.ExpectedException">
            <summary>
             Gets the expected exception Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.ExpectedExceptionName">
            <summary>
            Gets the FullName of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.ExpectedMessage">
            <summary>
            Gets or sets the expected message of the expected exception
            </summary>
            <value>The expected message of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Description">
            <summary>
            Gets the description of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.IgnoreReason">
            <summary>
            Gets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Categories">
            <summary>
            Gets a list of categories associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.MessageMatch">
            <summary>
            Enumeration indicating how the expected message parameter is to be used
            </summary>
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Exact">
            Expect an exact match
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Contains">
            Expect a message containing the parameter string
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Regex">
            Match the regular expression provided as a parameter
        </member>
        <member name="F:NUnit.Framework.MessageMatch.StartsWith">
            Expect a message that starts with the parameter string
        </member>
        <member name="T:NUnit.Framework.AssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Is">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOfType(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOfType``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyDirectoryContraint">
            <summary>
            EmptyDirectoryConstraint is used to test that a directory is empty
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryContraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryContraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryContraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubDirectoryConstraint">
            <summary>
            SubDirectoryConstraint is used to test that one directory is a subdirectory of another.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubDirectoryConstraint.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SubDirectoryConstraint"/> class.
            </summary>
            <param name="dirInfo">The dir info.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubDirectoryConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubDirectoryConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubDirectoryConstraint.BuildDirectoryList(System.IO.DirectoryInfo)">
            <summary>
            Builds a list of DirectoryInfo objects, recursing where necessary
            </summary>
            <param name="StartingDirectory">directory to recurse</param>
            <returns>list of DirectoryInfo objects from the top level</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubDirectoryConstraint.IsDirectoryOnPath(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            private method to determine whether a directory is within the path
            </summary>
            <param name="ParentDirectory">top-level directory to search</param>
            <param name="SearchDirectory">directory to search for</param>
            <returns>true if found, false if not</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubDirectoryConstraint.DirectoriesEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Method to compare two DirectoryInfo objects
            </summary>
            <param name="expected">first directory to compare</param>
            <param name="actual">second directory to compare</param>
            <returns>true if equivalent, false if not</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.DelayedConstraint">
            <summary>
             Applies a delay to the match so that a match can be evaluated in the future.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.Constraint,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint two decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.Constraint,System.Int32,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint two decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed</param>
            <param name="pollingInterval">The time interval used for polling</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Test whether the constraint is satisfied by a delegate
            </summary>
            <param name="del">The delegate whose value is to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            Overridden to wait for the specified delay period before
            calling the base constraint with the dereferenced value.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.ToString">
            <summary>
            Returns the string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PredicateConstraint`1">
            <summary>
            Predicate constraint wraps a Predicate in a constraint,
            returning success if the predicate is true.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.#ctor(System.Predicate{`0})">
            <summary>
            Construct a PredicateConstraint from a predicate
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.Matches(System.Object)">
            <summary>
            Determines whether the predicate succeeds when applied
            to the actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the description to a MessageWriter
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.InconclusiveException">
            <summary>
            Thrown when a test executes inconclusively.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuccessException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.ParameterDataAttribute">
            <summary>
            Abstract base class for attributes that apply to parameters 
            and supply data for the parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParameterDataAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Gets the data to be provided to the specified parameter
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValuesAttribute">
            <summary>
            ValuesAttribute is used to provide literal arguments for
            an individual parameter of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ValuesAttribute.data">
            <summary>
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object)">
            <summary>
            Construct with one argument
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct with two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct with three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Construct with an array of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValueSourceAttribute">
            <summary>
            ValueSourceAttribute indicates the source to be used to
            provide data for one parameter of a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">The name of the data source to be used</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="T:NUnit.Framework.TimeoutAttribute">
            <summary>
            WUsed on a method, marks the test with a timeout value in milliseconds. 
            The test will be run in a separate thread and is cancelled if the timeout 
            is exceeded. Used on a method or assembly, sets the default timeout 
            for all contained test methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Construct a TimeoutAttribute given a time in milliseconds
            </summary>
            <param name="timeout">The timeout value in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.RequiresSTAAttribute">
            <summary>
            Marks a test that must run in the STA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use STAThreadAttribute
            to serve the same purpose.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresSTAAttribute.#ctor">
            <summary>
            Construct a RequiresSTAAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.RequiresMTAAttribute">
            <summary>
            Marks a test that must run in the MTA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use MTAThreadAttribute
            to serve the same purpose.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresMTAAttribute.#ctor">
            <summary>
            Construct a RequiresMTAAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.RequiresThreadAttribute">
            <summary>
            Marks a test that must run on a separate thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor">
            <summary>
            Construct a RequiresThreadAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor(System.Threading.ApartmentState)">
            <summary>
            Construct a RequiresThreadAttribute, specifying the apartment
            </summary>
        </member>
        <member name="T:NUnit.Framework.TheoryAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            Attribute used to identify a method that is called after
            all the tests in a fixture have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            Attribute used to identify a method that is 
            called before any tests in a fixture are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuiteAttribute">
            <summary>
            Attribute used to mark a static (shared in VB) property
            that returns a list of tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.StringAssert">
            <summary>
            Basic Asserts on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is not found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String)">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String)">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that two strings are Notequal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String,System.String)">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String)">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            SetUpFixtureAttribute is used to identify a SetUpFixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetCultureAttribute">
            <summary>
            Summary description for SetCultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetCultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.RequiredAddinAttribute">
            <summary>
            RequiredAddinAttribute may be used to indicate the names of any addins
            that must be present in order to run some or all of the tests in an
            assembly. If the addin is not loaded, the entire assembly is marked
            as NotRunnable.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiredAddinAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RequiredAddinAttribute"/> class.
            </summary>
            <param name="requiredAddin">The required addin.</param>
        </member>
        <member name="P:NUnit.Framework.RequiredAddinAttribute.RequiredAddin">
            <summary>
            Gets the name of required addin.
            </summary>
            <value>The required addin name.</value>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute">
            <summary>
            RepeatAttribute may be applied to test case in order
            to run it multiple times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.#ctor(System.Int32)">
            <summary>
            Construct a RepeatAttribute
            </summary>
            <param name="count">The number of times to run the test</param>
        </member>
        <member name="T:NUnit.Framework.RangeAttribute">
            <summary>
            RangeAttribute is used to supply a range of values to an
            individual parameter of a parameterized test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a range of ints using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a range of ints specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Construct a range of longs
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a range of doubles
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a range of floats
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="T:NUnit.Framework.Randomizer">
            <summary>
            Randomizer returns a set of random values in a repeatable
            way, to allow re-running of tests if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetRandomizer(System.Reflection.MemberInfo)">
            <summary>
            Get a randomizer for a particular member, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetRandomizer(System.Reflection.ParameterInfo)">
            <summary>
            Get a randomizer for a particular parameter, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.#ctor">
            <summary>
            Construct a randomizer using a random seed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.#ctor(System.Int32)">
            <summary>
            Construct a randomizer using a specified seed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetDoubles(System.Int32)">
            <summary>
            Return an array of random doubles between 0.0 and 1.0.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetDoubles(System.Double,System.Double,System.Int32)">
            <summary>
            Return an array of random doubles with values in a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an array of random ints with values in a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Randomizer.RandomSeed">
            <summary>
            Get a random seed for use in creating a randomizer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.RandomAttribute">
            <summary>
            RandomAttribute is used to supply a set of random values
            to a single parameter of a parameterized test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32)">
            <summary>
            Construct a set of doubles from 0.0 to 1.0,
            specifying only the count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Construct a set of doubles from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a set of ints from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="T:NUnit.Framework.MaxTimeAttribute">
            <summary>
            Summary description for MaxTimeAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MaxTimeAttribute.#ctor(System.Int32)">
            <summary>
            Construct a MaxTimeAttribute, given a time in milliseconds.
            </summary>
            <param name="milliseconds">The maximum elapsed time in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.List">
            <summary>
            The List class is a helper class with properties and methods
            that supply a number of constraints used with lists and collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.List.Map(System.Collections.ICollection)">
            <summary>
            List.Map returns a ListMapper, which can be used to map
            the original collection to another collection.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.CombinatorialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument 
            data provided. Since this is the default, the attribute is
            not needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CombinatorialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.PairwiseAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument 
            data provided. Since this is the default, the attribute is
            not needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PairwiseAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SequentialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument 
            data provided. Since this is the default, the attribute is
            not needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SequentialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Iz">
            <summary>
            The Iz class is a synonym for Is intended for use in VB,
            which regards Is as a keyword.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple itemss may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-deliminted list of platforms</param>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-deliminted list of cultures</param>
        </member>
        <member name="T:NUnit.Framework.FileAssert">
            <summary>
            Summary description for FileAssert.
            </summary>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to be displayed when the two Stream are the same.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to be displayed when the Streams are the same.</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="P:NUnit.Framework.ExplicitAttribute.Reason">
            <summary>
            The reason test is marked explicit
            </summary>
        </member>
        <member name="T:NUnit.Framework.DirectoryAssert">
            <summary>
            Summary description for DirectoryAssert
            </summary>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.String,System.String,System.String)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.String,System.String)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.String,System.String,System.String)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.String,System.String)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.String,System.String)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.String)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.IO.DirectoryInfo)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.String,System.String)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.String)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.String,System.String,System.String)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.String,System.String)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.String,System.String,System.String)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.String,System.String)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="T:NUnit.Framework.DatapointAttribute">
            <summary>
            Used to mark a field for use as a datapoint when executing a theory
            within the same fixture that requires an argument of the field's Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointsAttribute">
            <summary>
            Used to mark an array as containing a set of datapoints to be used
            executing a theory within the same fixture that requires an argument 
            of the Type of the array elements.
            </summary>
        </member>
        <member name="T:NUnit.Framework.CollectionAssert">
            <summary>
            A set of Assert methods operationg on one or more collections
            </summary>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable,System.String)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer,System.String)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
        </member>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Attribute used to apply a category to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assume">
            <summary>
            Provides static methods to express the assumptions
            that must be met for a test to give a meaningful
            result. If an assumption is not met, the test
            should produce an inconclusive result.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assume.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the 
            method throws an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="T:NUnit.Framework.SetUICultureAttribute">
            <summary>
            Summary description for SetUICultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetUICultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.Text">
            <summary>
            Helper class with static methods used to supply constraints
            that operate on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.Contains(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotContain(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotStartWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotEndWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotMatch(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Text.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Core.Builders.DatapointProvider">
            <summary>
            Provides data from fields marked with the DatapointAttribute or the
            DatapointsAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Core.Builders.LegacySuiteBuilder">
            <summary>
            Built-in SuiteBuilder for LegacySuite
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.LegacySuiteBuilder.CanBuildFrom(System.Type)">
            <summary>
            Checks to see if the fixture type has the a property
            with the SuiteAttribute.
            </summary>
            <param name="type">The fixture type to check</param>
            <returns>True if the fixture can be built, false if not</returns>
        </member>
        <member name="T:NUnit.Core.Builders.NUnitTestFixtureBuilder">
            <summary>
            Built-in SuiteBuilder for NUnit TestFixture
            </summary>
        </member>
        <member name="F:NUnit.Core.Builders.NUnitTestFixtureBuilder.fixture">
            <summary>
            The NUnitTestFixture being constructed;
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.CanBuildFrom(System.Type)">
            <summary>
            Checks to see if the fixture type has the TestFixtureAttribute
            </summary>
            <param name="type">The fixture type to check</param>
            <returns>True if the fixture can be built, false if not</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.BuildFrom(System.Type)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.AddTestCases(System.Type)">
            <summary>
            Method to add test cases to the newly constructed fixture.
            The default implementation looks at each candidate method
            and tries to build a test case from it. It will only need
            to be overridden if some other approach, such as reading a 
            datafile is used to generate test cases.
            </summary>
            <param name="fixtureType"></param>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.BuildTestCase(System.Reflection.MethodInfo,NUnit.Core.TestSuite)">
            <summary>
            Method to create a test case from a MethodInfo and add
            it to the fixture being built. It first checks to see if
            any global TestCaseBuilder addin wants to build the
            test case. If not, it uses the internal builder
            collection maintained by this fixture builder. After
            building the test case, it applies any decorators
            that have been installed.
            
            The default implementation has no test case builders.
            Derived classes should add builders to the collection
            in their constructor.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.IsValidFixtureType(System.Type,System.String@)">
            <summary>
            Check that the fixture type is valid. This method ensures that 
            the type is not abstract and that there is no more than one of 
            each setup or teardown method and that their signatures are correct.
            </summary>
            <param name="fixtureType">The type of the fixture to check</param>
            <param name="reason">A message indicating why the fixture is invalid</param>
            <returns>True if the fixture is valid, false if not</returns>
        </member>
        <member name="T:NUnit.Core.Builders.SetUpFixtureBuilder">
            <summary>
            SetUpFixtureBuilder knows how to build a SetUpFixture.
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseParameterProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseParameterProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseParameterProvider.PerformSpecialConversions(System.Object[],System.Reflection.ParameterInfo[])">
            <summary>
            Performs several special conversions allowed by NUnit in order to
            permit arguments with types that cannot be used in the constructor
            of an Attribute such as TestCaseAttribute.
            </summary>
            <param name="arglist">The arguments to be converted</param>
            <param name="parameters">The ParameterInfo array for the method</param>
        </member>
        <member name="T:NUnit.Core.Builders.TestCaseSourceProvider">
            <summary>
            TestCaseSourceProvider provides data for methods
            annotated with the TestCaseSourceAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.HasTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.GetTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.Builders.ValueSourceProvider">
            <summary>
            ValueSourceProvider supplies data items for individual parameters
            from named data sources in the test class or a separate class.
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data sources are available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo test parameter</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing test data for use with
            one parameter of a parameterized test.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.HasDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any data sources are available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo test parameter</param>
            <param name="parentSuite">The test suite for which the test is being built</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.GetDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing test data for use with
            one parameter of a parameterized test.
            </summary>
            <param name="parameter"></param>
            <param name="parentSuite">The test suite for which the test is being built</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.Builders.TestAssemblyBuilder">
            <summary>
            TestAssemblyBuilder loads a single assembly and builds a TestSuite
            containing test fixtures present in the assembly.
            </summary>
        </member>
        <member name="F:NUnit.Core.Builders.TestAssemblyBuilder.assembly">
            <summary>
            The loaded assembly
            </summary>
        </member>
        <member name="F:NUnit.Core.Builders.TestAssemblyBuilder.legacySuiteBuilder">
            <summary>
            Our LegacySuite builder, which is only used when a 
            fixture has been passed by name on the command line.
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.TestAssemblyBuilder.Build(System.String,System.String,System.Boolean)">
            <summary>
            Loads the specified assembly and returns a TestSuite containing
            test fixtures found in the assembly. If fixtureName is null, then
            all fixtures are loaded. Otherwise only the specified fixture or
            namespace is loaded. 
            </summary>
            <param name="assemblyName">Name of the assembly to load</param>
            <param name="fixtureName">Name of the fixture or of a namespace to load</param>
            <param name="autoSuites">If true, automatic namespace suites are created</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Core.Builders.TestAssemblyBuilder.AssemblyInfo">
            <summary>
            Gets information about the loaded assembly
            </summary>
        </member>
        <member name="T:NUnit.Core.Builders.NUnitTestCaseBuilder">
            <summary>
            Class to build ether a parameterized or a normal NUnitTestMethod.
            There are four cases that the builder must deal with:
              1. The method needs no params and none are provided
              2. The method needs params and they are provided
              3. The method needs no params but they are provided in error
              4. The method needs params but they are not provided
            This could have been done using two different builders, but it
            turned out to be simpler to have just one. The BuildFrom method
            takes a different branch depending on whether any parameters are
            provided, but all four cases are dealt with in lower-level methods
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.CanBuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attriute for this to be true.
            
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
            <param name="method">A MethodInfo for the method being used as a test method</param>
            <param name="suite">The test suite being built, to which the new test would be added</param>
            <returns>True if the builder can create a test case from this method</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.BuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <param name="suite">The test fixture being populated, or null</param>
            <returns>A Test representing one or more method invocations</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.BuildParameterizedMethodSuite(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Builds a ParameterizedMetodSuite containing individual
            test cases for each set of parameters provided for
            this method.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <returns>A ParameterizedMethodSuite populated with test cases</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.BuildSingleTestMethod(System.Reflection.MethodInfo,NUnit.Core.Test,NUnit.Core.Extensibility.ParameterSet)">
            <summary>
            Builds a single NUnitTestMethod, either as a child of the fixture 
            or as one of a set of test cases under a ParameterizedTestMethodSuite.
            </summary>
            <param name="method">The MethodInfo from which to construct the TestMethod</param>
            <param name="parentSuite">The suite or fixture to which the new test will be added</param>
            <param name="parms">The ParameterSet to be used, or null</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.CheckTestMethodSignature(NUnit.Core.TestMethod,NUnit.Core.Extensibility.ParameterSet)">
            <summary>
            Helper method that checks the signature of a TestMethod and
            any supplied parameters to determine if the test is valid.
            
            Currently, NUnitTestMethods are required to be public, 
            non-abstract methods, either static or instance,
            returning void. They may take arguments but the values must
            be provided or the TestMethod is not considered runnable.
            
            Methods not meeting these criteria will be marked as
            non-runnable and the method will return false in that case.
            </summary>
            <param name="testMethod">The TestMethod to be checked. If it
            is found to be non-runnable, it will be modified.</param>
            <param name="parms">Parameters to be used for this test, or null</param>
            <returns>True if the method signature is valid, false if not</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.ExtensionPoint">
            <summary>
            ExtensionPoint is used as a base class for all 
            extension points.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ExtensionPoint.Install(System.Object)">
            <summary>
            Install an extension at this extension point. If the
            extension object does not meet the requirements for
            this extension point, an exception is thrown.
            </summary>
            <param name="extension">The extension to install</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.ExtensionPoint.Install(System.Object,System.Int32)">
            <summary>
            Install an extension at this extension point specifying
            an integer priority value for the extension.If the
            extension object does not meet the requirements for
            this extension point, or if the extension point does
            not support the requested priority level, an exception 
            is thrown.
            </summary>
            <param name="extension">The extension to install</param>
            <param name="priority">The priority level for this extension</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.ExtensionPoint.Remove(System.Object)">
            <summary>
            Removes an extension from this extension point. If the
            extension object is not present, the method returns
            without error.
            </summary>
            <param name="extension"></param>
        </member>
        <member name="P:NUnit.Core.Extensibility.ExtensionPoint.Name">
            <summary>
            Get the name of this extension point
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ExtensionPoint.Host">
            <summary>
            Get the host that provides this extension point
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.HasDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.GetDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.EventListenerCollection">
            <summary>
            EventListenerCollection holds multiple event listeners
            and relays all event calls to each of them.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ExtensionHost">
            <summary>
            ExtensionHost is the abstract base class used for
            all extension hosts. It provides an array of 
            extension points and a FrameworkRegistry and
            implements the IExtensionHost interface. Derived
            classes must initialize the extension points.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.FrameworkRegistry.testFrameworks">
            <summary>
            List of FrameworkInfo structs for supported frameworks
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.FrameworkRegistry.Register(System.String,System.String)">
            <summary>
            Register a framework. NUnit registers itself using this method. Add-ins that
            work with or emulate a different framework may register themselves as well.
            </summary>
            <param name="frameworkName">The name of the framework</param>
            <param name="assemblyName">The name of the assembly that framework users reference</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.FrameworkRegistry.GetReferencedFrameworks(System.Reflection.Assembly)">
            <summary>
            Get a list of known frameworks referenced by an assembly
            </summary>
            <param name="assembly">The assembly to be examined</param>
            <returns>A list of AssemblyNames</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.ParameterSet">
            <summary>
            ParameterSet encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.ParameterSet.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ParameterSet.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider excetpion that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ParameterSet.#ctor">
            <summary>
            Construct an empty parameter set, which
            defaults to being Runnable.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ParameterSet.#ctor(NUnit.Framework.ITestCaseData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestCaseData
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.RunState">
            <summary>
            The RunState for this set of parameters.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.NotRunReason">
            <summary>
            The reason for not running the test case
            represented by this ParameterSet
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ProviderException">
            <summary>
            Holds any exception thrown by the parameter provider
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Arguments">
            <summary>
            The arguments to be used in running the test,
            which must match the method signature.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ExpectedException">
            <summary>
            The Type of any exception that is expected.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ExpectedExceptionName">
            <summary>
            The FullName of any exception that is expected
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ExpectedMessage">
            <summary>
            The Message of any exception that is expected
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Result">
            <summary>
            The expected result of the test, which
            must match the method return type.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Description">
            <summary>
            A description to be applied to this test case
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.TestName">
            <summary>
            A name to be used for this test case in lieu
            of the standard generated name containing
            the argument list.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Core.Extensibility.ParameterSet"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.IgnoreReason">
            <summary>
            Gets or sets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Categories">
            <summary>
            Gets a list of categories associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.SuiteBuilderCollection">
            <summary>
            SuiteBuilderCollection is an ExtensionPoint for SuiteBuilders and
            implements the ISuiteBuilder interface itself, passing calls 
            on to the individual builders.
            
            The builders are added to the collection by inserting them at
            the start, as to take precedence over those added earlier. 
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.SuiteBuilderCollection.#ctor(NUnit.Core.Extensibility.IExtensionHost)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.SuiteBuilderCollection.CanBuildFrom(System.Type)">
            <summary>
            Examine the type and determine if it is suitable for
            any SuiteBuilder to use in building a TestSuite
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>True if the type can be used to build a TestSuite</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.SuiteBuilderCollection.BuildFrom(System.Type)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>A TestSuite or null</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.TestCaseBuilderCollection">
            <summary>
            TestCaseBuilderCollection is an ExtensionPoint for TestCaseBuilders 
            and implements the ITestCaseBuilder interface itself, passing calls 
            on to the individual builders.
            
            The builders are added to the collection by inserting them at
            the start, as to take precedence over those added earlier. 
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.CanBuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Examine the method and determine if it is suitable for
            any TestCaseBuilder to use in building a Test
            </summary>
            <param name="method">The method to be used as a test case</param>
            <returns>True if the method can be used to build a Test</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.BuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Build a Test from the method provided.
            </summary>
            <param name="method">The method to be used</param>
            <returns>A Test or null</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.CanBuildFrom(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Examine the method and determine if it is suitable for
            any TestCaseBuilder to use in building a Test
            </summary>
            <param name="method">The method to be used as a test case</param>
            <returns>True if the method can be used to build a Test</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.BuildFrom(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Build a Test from the method provided.
            </summary>
            <param name="method">The method to be used</param>
            <returns>A Test or null</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an enumeration providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.HasTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <param name="suite">The suite for which the test case is being built</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.GetTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Return an enumeration providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <param name="suite">The suite for which the test case is being built</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.TestDecoratorCollection">
            <summary>
            TestDecoratorCollection is an ExtensionPoint for TestDecorators and
            implements the ITestDecorator interface itself, passing calls 
            on to the individual decorators.
            </summary>
        </member>
        <member name="T:NUnit.Core.AssemblyReader">
            <summary>
            AssemblyReader knows how to find various things in an assembly header
            </summary>
        </member>
        <member name="T:NUnit.Core.CoreExtensions">
            <summary>
            CoreExtensions is a singleton class that groups together all 
            the extension points that are supported in the test domain.
            It also provides access to the test builders and decorators
            by other parts of the NUnit core.
            </summary>
        </member>
        <member name="P:NUnit.Core.CoreExtensions.AddinRegistry">
            <summary>
            Our AddinRegistry may be set from outside or passed into the domain
            </summary>
        </member>
        <member name="M:NUnit.Core.CultureDetector.#ctor">
            <summary>
            Default constructor uses the current culutre.
            </summary>
        </member>
        <member name="M:NUnit.Core.CultureDetector.#ctor(System.String)">
            <summary>
            Contruct a CultureHelper for a particular culture for testing.
            </summary>
            <param name="culture">The culture to be used</param>
        </member>
        <member name="M:NUnit.Core.CultureDetector.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of culturess
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.CultureDetector.IsCultureSupported(NUnit.Framework.CultureAttribute)">
            <summary>
            Tests to determine if the current culture is supported
            based on a culture attribute.
            </summary>
            <param name="cultureAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.CultureDetector.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="culture">Name of the culture or comma-separated list of culture names</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="P:NUnit.Core.CultureDetector.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Core.DirectorySwapper">
            <summary>
            Utility class that allows changing the current directory 
            for the duration of some lexical scope and guaranteeing
            that it will be restored upon exit.
            
            Use it as follows:
               using( new DirectorySwapper( @"X:\New\Path" )
               {
                   // Code that operates in the new current directory
               }
               
            Instantiating DirectorySwapper without a path merely
            saves the current directory, but does not change it.
            </summary>
        </member>
        <member name="T:NUnit.Core.EventPumpState">
            <summary>
            The EventPumpState enum represents the state of an
            EventPump.
            </summary>
        </member>
        <member name="T:NUnit.Core.EventPump">
            <summary>
            EventPump pulls events out of an EventQueue and sends
            them to a listener. It is used to send events back to
            the client without using the CallContext of the test
            runner thread.
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.eventListener">
            <summary>
            The downstream listener to which we send events
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.events">
            <summary>
            The queue that holds our events
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.pumpThread">
            <summary>
            Thread to do the pumping
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.pumpState">
            <summary>
            The current state of the eventpump
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.autostop">
            <summary>
            If true, stop after sending RunFinished
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.#ctor(NUnit.Core.ITestListener,NUnit.Core.EventQueue,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="eventListener">The EventListener to receive events</param>
            <param name="events">The event queue to pull events from</param>
            <param name="autostop">Set to true to stop pump after RunFinished</param>
        </member>
        <member name="M:NUnit.Core.EventPump.Dispose">
            <summary>
            Dispose stops the pump
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.Start">
            <summary>
            Start the pump
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.Stop">
            <summary>
            Tell the pump to stop after emptying the queue.
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.PumpThreadProc">
            <summary>
            Our thread proc for removing items from the event
            queue and sending them on. Note that this would
            need to do more locking if any other thread were
            removing events from the queue.
            </summary>
        </member>
        <member name="P:NUnit.Core.EventPump.PumpState">
            <summary>
            The current state of the pump
            </summary>
        </member>
        <member name="T:NUnit.Core.Event">
            <summary>
            NUnit.Core.Event is the abstract base for all stored events.
            An Event is the stored representation of a call to the 
            EventListener interface and is used to record such calls
            or to queue them for forwarding on another thread or at
            a later time.
            </summary>
        </member>
        <member name="T:NUnit.Core.EventQueue">
            <summary>
            Implements a queue of work items each of which
            is queued as a WaitCallback.
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.testMethod">
            <summary>
            The TestMethod to which this exception processor applies
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.exceptionHandler">
            <summary>
            The exception handler method
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.expectedExceptionType">
            <summary>
            The type of any expected exception
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.expectedExceptionName">
            <summary>
            The full name of any expected exception type
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.expectedMessage">
            <summary>
            The value of any message associated with an expected exception
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.matchType">
            <summary>
            A string indicating how to match the expected message
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.userMessage">
            <summary>
            A string containing any user message specified for the expected exception
            </summary>
        </member>
        <member name="T:NUnit.Core.InternalTrace">
            <summary>
            Summary description for Logger.
            </summary>
        </member>
        <member name="T:NUnit.Core.InternalTraceWriter">
            <summary>
            A trace listener that writes to a separate file per domain
            and process using it.
            </summary>
        </member>
        <member name="T:NUnit.Core.InvalidTestFixtureException">
            <summary>
            Summary description for NoTestMethodsException.
            </summary>
            
        </member>
        <member name="M:NUnit.Core.InvalidTestFixtureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Core.LegacySuite">
            <summary>
            Represents a test suite constructed from a type that has a static Suite property
            </summary>
        </member>
        <member name="T:NUnit.Core.TestSuite">
            <summary>
            Summary description for TestSuite.
            </summary>
            
        </member>
        <member name="F:NUnit.Core.TestSuite.tests">
            <summary>
            Our collection of child tests
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixtureSetUpMethods">
            <summary>
            The fixture setup methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixtureTearDownMethods">
            <summary>
            The fixture teardown methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.setUpMethods">
            <summary>
            The setup methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.tearDownMethods">
            <summary>
            The teardown methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.maintainTestOrder">
            <summary>
            Set to true to suppress sorting this suite's contents
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.arguments">
            <summary>
            Arguments for use in creating a parameterized fixture
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixtureType">
            <summary>
            The System.Type of the fixture for this test suite, if there is one
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixture">
            <summary>
            The fixture object, if it has been created
            </summary>
        </member>
        <member name="T:NUnit.Core.Log4NetCapture">
            <summary>
            Proxy class for operations on a real log4net appender,
            allowing NUnit to work with multiple versions of log4net
            and to fail gracefully if no log4net assembly is present.
            </summary>
        </member>
        <member name="T:NUnit.Core.TextCapture">
            <summary>
            Abstract base for classes that capture text output
            and redirect it to a TextWriter.
            </summary>
        </member>
        <member name="F:NUnit.Core.TextCapture.enabled">
            <summary>
            True if capture is enabled
            </summary>
        </member>
        <member name="F:NUnit.Core.TextCapture.writer">
            <summary>
            The TextWriter to which text is redirected
            </summary>
        </member>
        <member name="M:NUnit.Core.TextCapture.StartCapture">
            <summary>
            Override this to perform whatever actions are needed
            to start capturing text and sending it to the Writer.
            </summary>
        </member>
        <member name="M:NUnit.Core.TextCapture.StopCapture">
            <summary>
            Override this to perform whatever actions are needed
            to flush remaining output and stop capturing text.
            The Writer should not be changed, allowing capture
            to be restarted at a future point.
            </summary>
        </member>
        <member name="P:NUnit.Core.TextCapture.Writer">
            <summary>
            The TextWriter to which text is redirected
            </summary>
        </member>
        <member name="P:NUnit.Core.TextCapture.Enabled">
            <summary>
            Controls whether text is captured or not
            </summary>
        </member>
        <member name="P:NUnit.Core.TextCapture.DefaultThreshold">
            <summary>
            Returns the default threshold value, which represents
            the degree of verbosity of the output text stream.
            Returns "None" in the base class. Derived classes that
            support verbosity levels should override it.
            </summary>
        </member>
        <member name="P:NUnit.Core.LogCapture.DefaultThreshold">
            <summary>
            The default threshold for log capture
            is read from the config file. If not
            found, we use "Error".
            </summary>
        </member>
        <member name="M:NUnit.Core.Log4NetCapture.TryCreateAppender">
            <summary>
            Attempt to create a TextWriterAppender using reflection,
            failing silently if it is not possible.
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitException">
            <summary>
            Thrown when an assertion failed. Here to preserve the inner
            exception and hence its stack trace.
            </summary>
            
        </member>
        <member name="M:NUnit.Core.NUnitException.#ctor(System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Core.NUnitException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Core.NUnitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitFramework">
            <summary>
            Static methods that implement aspects of the NUnit framework that cut 
            across individual test types, extensions, etc. Some of these use the 
            methods of the Reflect class to implement operations specific to the 
            NUnit Framework.
            </summary>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.ApplyCommonAttributes(System.Reflection.MemberInfo,NUnit.Core.Test)">
            <summary>
            Modify a newly constructed test based on a type or method by 
            applying any of NUnit's common attributes.
            </summary>
            <param name="member">The type or method from which the test was constructed</param>
            <param name="test">The test to which the attributes apply</param>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.ApplyCommonAttributes(System.Reflection.Assembly,NUnit.Core.Test)">
            <summary>
            Modify a newly constructed test based on an assembly by applying 
            any of NUnit's common attributes.
            </summary>
            <param name="assembly">The assembly from which the test was constructed</param>
            <param name="test">The test to which the attributes apply</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NUnit.Core.NUnitFramework.ApplyCommonAttributes(System.Attribute[],NUnit.Core.Test)" -->
        <member name="M:NUnit.Core.NUnitFramework.ApplyExpectedExceptionAttribute(System.Reflection.MethodInfo,NUnit.Core.TestMethod)">
            <summary>
            Modify a newly constructed test by checking for ExpectedExceptionAttribute
            and setting properties on the test accordingly.
            </summary>
            <param name="method">The method being processed, possibly annotated with an ExpectedExceptionAttribute</param>
            <param name="testMethod">The test to which the attributes apply</param>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.GetResultState(System.Exception)">
            <summary>
            Returns a result state for a special exception.
            If the exception is not handled specially, returns
            ResultState.Error.
            </summary>
            <param name="ex">The exception to be examined</param>
            <returns>A ResultState</returns>
        </member>
        <member name="T:NUnit.Core.NUnitTestFixture">
            <summary>
            Class to implement an NUnit test fixture
            </summary>
        </member>
        <member name="T:NUnit.Core.TestFixture">
            <summary>
            TestFixture is a surrogate for a user test fixture class,
            containing one or more tests.
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitTestMethod">
            <summary>
            Class to implement an NUnit test method
            </summary>
        </member>
        <member name="T:NUnit.Core.TestMethod">
            <summary>
            The TestMethod class represents a Test implemented as a method.
            
            Because of how exceptions are handled internally, this class
            must incorporate processing of expected exceptions. A change to
            the Test interface might make it easier to process exceptions
            in an object that aggregates a TestMethod in the future.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.method">
            <summary>
            The test method
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.setUpMethods">
            <summary>
            The SetUp method.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.tearDownMethods">
            <summary>
            The teardown method
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.exceptionProcessor">
            <summary>
            The ExpectedExceptionProcessor for this test, if any
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.arguments">
            <summary>
            Arguments to be used in invoking the method
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.expectedResult">
            <summary>
            The expected result of the method return value
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.fixture">
            <summary>
            The fixture object, if it has been created
            </summary>
        </member>
        <member name="M:NUnit.Core.TestMethod.doRun(NUnit.Core.TestResult)">
            <summary>
            The doRun method is used to run a test internally.
            It assumes that the caller is taking care of any 
            TestFixtureSetUp and TestFixtureTearDown needed.
            </summary>
            <param name="testResult">The result in which to record success or failure</param>
        </member>
        <member name="M:NUnit.Core.NUnitTestMethod.Run(NUnit.Core.TestResult)">
            <summary>
            Run a test returning the result. Overrides TestMethod
            to count assertions.
            </summary>
            <param name="testResult"></param>
        </member>
        <member name="T:NUnit.Core.NamespaceTreeBuilder">
            <summary>
            Class that can build a tree of automatic namespace
            suites from a group of fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Core.NamespaceTreeBuilder.namespaceSuites">
            <summary>
            Hashtable of all test suites we have created to represent namespaces.
            Used to locate namespace parent suites for fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Core.NamespaceTreeBuilder.rootSuite">
            <summary>
            The root of the test suite being created by this builder.
            </summary>
        </member>
        <member name="T:NUnit.Core.NullListener">
            <summary>
            Summary description for NullListener.
            </summary>
            
        </member>
        <member name="T:NUnit.Core.OSPlatform">
            <summary>
            OSPlatform represents a particular operating system platform
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.UnixPlatformID_Microsoft">
            <summary>
            Platform ID for Unix as defined by Microsoft .NET 2.0 and greater
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.UnixPlatformID_Mono">
            <summary>
            Platform ID for Unix as defined by Mono
            </summary>
        </member>
        <member name="M:NUnit.Core.OSPlatform.#ctor(System.PlatformID,System.Version)">
            <summary>
            Construct from a platform ID and version
            </summary>
        </member>
        <member name="M:NUnit.Core.OSPlatform.#ctor(System.PlatformID,System.Version,NUnit.Core.OSPlatform.ProductType)">
            <summary>
            Construct from a platform ID, version and product type
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.CurrentPlatform">
            <summary>
            Get the OSPlatform under which we are currently running
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.Platform">
            <summary>
            Get the platform ID of this instance
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.Version">
            <summary>
            Get the Version of this instance
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.Product">
            <summary>
            Get the Product Type of this instance
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWindows">
            <summary>
            Return true if this is a windows platform
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsUnix">
            <summary>
            Return true if this is a Unix or Linux platform
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin32S">
            <summary>
            Return true if the platform is Win32S
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin32Windows">
            <summary>
            Return true if the platform is Win32Windows
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin32NT">
            <summary>
             Return true if the platform is Win32NT
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWinCE">
            <summary>
            Return true if the platform is Windows CE
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin95">
            <summary>
            Return true if the platform is Windows 95
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin98">
            <summary>
            Return true if the platform is Windows 98
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWinME">
            <summary>
            Return true if the platform is Windows ME
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT3">
            <summary>
            Return true if the platform is NT 3
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT4">
            <summary>
            Return true if the platform is NT 4
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT5">
            <summary>
            Return true if the platform is NT 5
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2K">
            <summary>
            Return true if the platform is Windows 2000
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWinXP">
            <summary>
            Return true if the platform is Windows XP
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2003Server">
            <summary>
            Return true if the platform is Windows 2003 Server
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT6">
            <summary>
            Return true if the platform is NT 6
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsVista">
            <summary>
            Return true if the platform is Vista
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2008Server">
            <summary>
            Return true if the platform is Windows 2008 Server
            </summary>
        </member>
        <member name="T:NUnit.Core.OSPlatform.ProductType">
            <summary>
            Product Type Enumeration used for Windows
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.Unknown">
            <summary>
            Product type is unknown or unspecified
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.WorkStation">
            <summary>
            Product type is Workstation
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.DomainController">
            <summary>
            Product type is Domain Controller
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.Server">
            <summary>
            Product type is Server
            </summary>
        </member>
        <member name="T:NUnit.Core.ParameterizedMethodSuite">
            <summary>
            ParameterizedMethodSuite holds a collection of individual
            TestMethods with their arguments applied.
            </summary>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Construct from a MethodInfo
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.Run(NUnit.Core.ITestListener,NUnit.Core.TestFilter)">
            <summary>
            Override Run, setting Fixture to that of the Parent.
            </summary>
            <param name="listener"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.DoOneTimeSetUp(NUnit.Core.TestResult)">
            <summary>
            Override DoOneTimeSetUp to avoid executing any
            TestFixtureSetUp method for this suite
            </summary>
            <param name="suiteResult"></param>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.DoOneTimeTearDown(NUnit.Core.TestResult)">
            <summary>
            Override DoOneTimeTearDown to avoid executing any
            TestFixtureTearDown method for this suite.
            </summary>
            <param name="suiteResult"></param>
        </member>
        <member name="F:NUnit.Core.PlatformHelper.OSPlatforms">
            <summary>
            Comma-delimited list of all supported OS platform constants
            </summary>
        </member>
        <member name="F:NUnit.Core.PlatformHelper.RuntimePlatforms">
            <summary>
            Comma-delimited list of all supported Runtime platform constants
            </summary>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.#ctor">
            <summary>
            Default constructor uses the operating system and
            common language runtime of the system.
            </summary>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.#ctor(NUnit.Core.OSPlatform,NUnit.Core.RuntimeFramework)">
            <summary>
            Contruct a PlatformHelper for a particular operating
            system and common language runtime. Used in testing.
            </summary>
            <param name="os">OperatingSystem to be used</param>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.IsPlatformSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of platforms
            is being used currently.
            </summary>
            <param name="platforms"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.IsPlatformSupported(NUnit.Framework.PlatformAttribute)">
            <summary>
            Tests to determine if the current platform is supported
            based on a platform attribute.
            </summary>
            <param name="platformAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.IsPlatformSupported(System.String)">
            <summary>
            Test to determine if the a particular platform or comma-
            delimited set of platforms is in use.
            </summary>
            <param name="platform">Name of the platform or comma-separated list of platform names</param>
            <returns>True if the platform is in use on the system</returns>
        </member>
        <member name="P:NUnit.Core.PlatformHelper.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Core.QueuingEventListener">
            <summary>
            QueuingEventListener uses an EventQueue to store any
            events received on its EventListener interface.
            </summary>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.RunStarted(NUnit.Core.TestName,System.Int32)">
            <summary>
            Run is starting
            </summary>
            <param name="testName">The TestName of the test being started</param>
            <param name="testCount">The number of test cases to be executed</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.RunFinished(NUnit.Core.TestResult)">
            <summary>
            Run finished successfully
            </summary>
            <param name="results">Array of test results</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.RunFinished(System.Exception)">
            <summary>
            Run was terminated due to an exception
            </summary>
            <param name="exception">Exception that was thrown</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.TestStarted(NUnit.Core.TestName)">
            <summary>
            A single test case is starting
            </summary>
            <param name="testCase">The test case</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.TestFinished(NUnit.Core.TestResult)">
            <summary>
            A test case finished
            </summary>
            <param name="result">Result of the test case</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.SuiteStarted(NUnit.Core.TestName)">
            <summary>
            A suite is starting
            </summary>
            <param name="suite">The suite that is starting</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.SuiteFinished(NUnit.Core.TestResult)">
            <summary>
            A suite finished
            </summary>
            <param name="result">Result of the suite</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.UnhandledException(System.Exception)">
            <summary>
            An unhandled exception occured while running a test,
            but the test was not terminated.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.TestOutput(NUnit.Core.TestOutput)">
            <summary>
            A message has been output to the console.
            </summary>
            <param name="testOutput">A console message</param>
        </member>
        <member name="P:NUnit.Core.QueuingEventListener.Events">
            <summary>
            The EvenQueue created and filled by this listener
            </summary>
        </member>
        <member name="T:NUnit.Core.Reflect">
            <summary>
            Helper methods for inspecting a type by reflection. 
            
            Many of these methods take ICustomAttributeProvider as an 
            argument to avoid duplication, even though certain attributes can 
            only appear on specific types of members, like MethodInfo or Type.
            
            In the case where a type is being examined for the presence of
            an attribute, interface or named member, the Reflect methods
            operate with the full name of the member being sought. This
            removes the necessity of the caller having a reference to the
            assembly that defines the item being sought and allows the
            NUnit core to inspect assemblies that reference an older
            version of the NUnit framework.
            </summary>
        </member>
        <member name="M:NUnit.Core.Reflect.HasAttribute(System.Reflection.ICustomAttributeProvider,System.String,System.Boolean)">
            <summary>
            Check presence of attribute with a given name on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attrName">The FullName of the attribute type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>True if the attribute is present</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetAttribute(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Get attribute of a given type on a member. If multiple attributes
            of a type are present, the first one found is returned.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Get all attributes of a given type on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attribueType">The attribute Type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Get all attributes on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.HasInterface(System.Type,System.String)">
            <summary>
            Check to see if a type implements a named interface.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="interfaceName">The FullName of the interface to check for</param>
            <returns>True if the interface is implemented by the type</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.InheritsFrom(System.Type,System.String)">
            <summary>
            Checks to see if a type inherits from a named type. 
            </summary>
            <param name="type">The type to examine</param>
            <param name="parentType">The FullName of the inherited type to look for</param>
            <returns>True if the type inherits from the named type.</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetConstructor(System.Type)">
            <summary>
            Find the default constructor on a type
            </summary>
            <param name="fixtureType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetConstructor(System.Type,System.Type[])">
            <summary>
            Find the default constructor on a type
            </summary>
            <param name="fixtureType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetMethodsWithAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Examine a fixture type and return an array of methods having a 
            particular attribute. The array is order with base methods first.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <returns>The array of methods found</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.HasMethodWithAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Examine a fixture type and return true if it has a method with
            a particular attribute. 
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetNamedMethod(System.Type,System.String)">
            <summary>
            Examine a fixture type and get a method with a particular name.
            In the case of overloads, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="methodName">The name of the method</param>
            <returns>A MethodInfo or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetNamedMethod(System.Type,System.String,System.String[])">
            <summary>
            Examine a fixture type and get a method with a particular name and list
            of arguments. In the case of overloads, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="methodName">The name of the method</param>
            <param name="argTypes">The full names of the argument types to search for</param>
            <returns>A MethodInfo or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetPropertyWithAttribute(System.Type,System.Type)">
            <summary>
            Examine a type and return a property having a particular attribute.
            In the case of multiple methods, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <returns>A PropertyInfo or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.Construct(System.Type)">
            <summary>
            Invoke the default constructor on a Type
            </summary>
            <param name="type">The Type to be constructed</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.Construct(System.Type,System.Object[])">
            <summary>
            Invoke a constructor on a Type with arguments
            </summary>
            <param name="type">The Type to be constructed</param>
            <param name="arguments">Arguments to the constructor</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invoke a parameterless method returning void on an object.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="M:NUnit.Core.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invoke a method returning void, converting any TargetInvocationException
            to an NUnitException
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="T:NUnit.Core.RemoteTestRunner">
            <summary>
            RemoteTestRunner is tailored for use as the initial runner to
            receive control in a remote domain. It provides isolation for the return
            value by using a ThreadedTestRunner and for the events through use of
            an EventPump.
            </summary>
        </member>
        <member name="T:NUnit.Core.ProxyTestRunner">
            <summary>
            DelegatingTestRUnner is the abstract base for core TestRunner
            implementations that operate by controlling a downstream
            TestRunner. All calls are simply passed on to the
            TestRunner that is provided to the constructor.
            
            Although the class is abstract, it has no abstract 
            methods specified because each implementation will
            need to override different methods. All methods are
            specified using interface syntax and the derived class
            must explicitly implement TestRunner in order to 
            redefine the selected methods.
            </summary>
        </member>
        <member name="F:NUnit.Core.ProxyTestRunner.runnerID">
            <summary>
            Our runner ID
            </summary>
        </member>
        <member name="F:NUnit.Core.ProxyTestRunner.testRunner">
            <summary>
            The downstream TestRunner
            </summary>
        </member>
        <member name="F:NUnit.Core.ProxyTestRunner.listener">
            <summary>
            The event listener for the currently running test
            </summary>
        </member>
        <member name="M:NUnit.Core.ProxyTestRunner.#ctor(System.Int32)">
            <summary>
            Protected constructor for runners that delay creation
            of their downstream runner.
            </summary>
        </member>
        <member name="P:NUnit.Core.ProxyTestRunner.TestRunner">
            <summary>
            Protected property copies any settings to the downstream test runner
            when it is set. Derived runners overriding this should call the base
            or copy the settings themselves.
            </summary>
        </member>
        <member name="M:NUnit.Core.RemoteTestRunner.CreateInstance(System.AppDomain,System.Int32)">
            <summary>
            Returns a RemoteTestRunner in the target domain. This method
            is used in the domain that wants to get a reference to 
            a RemoteTestRunnner and not in the test domain itself.
            </summary>
            <param name="targetDomain">AppDomain in which to create the runner</param>
            <param name="ID">Id for the new runner to use</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.SetUpFixture">
            <summary>
            SetUpFixture extends TestSuite and supports
            Setup and TearDown methods.
            </summary>
        </member>
        <member name="T:NUnit.Core.SuiteBuilderAttribute">
            <summary>
            SuiteBuilderAttribute is used to mark custom suite builders.
            The class so marked must implement the ISuiteBuilder interface.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestCaseBuilderAttribute">
            <summary>
            TestBuilderAttribute is used to mark custom test case builders.
            The class so marked must implement the ITestCaseBuilder interface.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestContext">
            <summary>
            Helper class used to save and restore certain static or
            singleton settings in the environment that affect tests 
            or which might be changed by the user tests.
            
            An internal class is used to hold settings and a stack
            of these objects is pushed and popped as Save and Restore
            are called.
            
            Static methods for each setting forward to the internal 
            object on the top of the stack.
            
            When TestContext itself is instantiated, it is used to
            save and restore settings for a block. It should be 
            used with using() or Disposed in a finally block.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.current">
            <summary>
            The current context, head of the list of saved contexts.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestContext.Save">
            <summary>
            Saves the old context and makes a fresh one 
            current without changing any settings.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestContext.Restore">
            <summary>
            Restores the last saved context and puts
            any saved settings back into effect.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestContext.#ctor">
            <summary>
            The constructor saves the current context.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestContext.Dispose">
            <summary>
            Dispose restores the old context
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.Out">
            <summary>
            Controls where Console.Out is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.Error">
            <summary>
            Controls where Console.Error is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.TraceWriter">
            <summary>
            Controls where Trace output is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.CurrentDirectory">
            <summary>
            The current directory setting
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.tracing">
            <summary>
            Indicates whether trace is enabled
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.logging">
            <summary>
            Indicates whether logging is enabled
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.outWriter">
            <summary>
            Destination for standard output
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.errorWriter">
            <summary>
            Destination for standard error
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.traceWriter">
            <summary>
            Destination for Trace output
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.testCaseTimeout">
            <summary>
            Default timeout for test cases
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.currentDirectory">
            <summary>
            The current working directory
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.currentCulture">
            <summary>
            The current culture
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.currentUICulture">
            <summary>
            The current UI culture
            </summary>
        </member>
        <member name="F:NUnit.Core.TestContext.ContextHolder.prior">
            <summary>
            Link to a prior saved context
            </summary>
        </member>
        <member name="M:NUnit.Core.TestContext.ContextHolder.ReverseChanges">
            <summary>
            Used to restore settings to their prior
            values before reverting to a prior context.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.ContextHolder.Tracing">
            <summary>
            Controls whether trace and debug output are written
            to the standard output.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.ContextHolder.Logging">
            <summary>
            Controls whether log output is captured
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.ContextHolder.Out">
            <summary>
            Controls where Console.Out is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.ContextHolder.Error">
            <summary>
            Controls where Console.Error is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestContext.ContextHolder.LogWriter">
            <summary>
             Gets or sets the Log writer, which is actually held by a log4net 
             TextWriterAppender. When first set, the appender will be created
             and will thereafter send any log events to the writer.
             
             In normal operation, LogWriter is set to an EventListenerTextWriter
             connected to the EventQueue in the test domain. The events are
             subsequently captured in the Gui an the output displayed in
             the Log tab. The application under test does not need to define
             any additional appenders.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestDecoratorAttribute">
            <summary>
            TestDecoratorAttribute is used to mark custom suite builders.
            The class so marked must implement the ISuiteBuilder interface.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestFixtureBuilder">
            <summary>
            TestFixtureBuilder contains static methods for building
            TestFixtures from types. It uses builtin SuiteBuilders
            and any installed extensions to do it.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestFixtureBuilder.BuildFrom(System.Type)">
            <summary>
            Build a test fixture from a given type.
            </summary>
            <param name="type">The type to be used for the fixture</param>
            <returns>A TestSuite if the fixture can be built, null if not</returns>
        </member>
        <member name="M:NUnit.Core.TestFixtureBuilder.BuildFrom(System.Object)">
            <summary>
            Build a fixture from an object. 
            </summary>
            <param name="fixture">The object to be used for the fixture</param>
            <returns>A TestSuite if fixture type can be built, null if not</returns>
        </member>
        <member name="M:NUnit.Core.TestFixtureBuilder.#ctor">
            <summary>
            Private constructor to prevent instantiation
            </summary>
        </member>
        <member name="T:NUnit.Core.TestRunnerThread">
            <summary>
            TestRunnerThread encapsulates running a test on a thread.
            It knows how to create the thread based on configuration
            settings and can cancel abort the test if necessary.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.runner">
            <summary>
            The Test runner to be used in running tests on the thread
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.thread">
            <summary>
            The System.Threading.Thread created by the object
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.listener">
            <summary>
            The EventListener interface to receive test events
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.filter">
            <summary>
            Array of test names for ues by the thread proc
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.results">
            <summary>
            Array of returned results
            </summary>
        </member>
        <member name="M:NUnit.Core.TestRunnerThread.TestRunnerThreadProc">
            <summary>
            The thread proc for our actual test run
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunnerThread.IsAlive">
            <summary>
            True if the thread is executing
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunnerThread.Results">
            <summary>
            Array of returned results
            </summary>
        </member>
        <member name="T:NUnit.Core.TestThread">
            <summary>
            Represents a thread of test execution and runs a test
            on a thread, implementing timeout and setting the 
            apartment state appropriately.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestThread.test">
            <summary>
            The TestMethod or TestSuite to be run on the thread
            </summary>
        </member>
        <member name="F:NUnit.Core.TestThread.thread">
            <summary>
            The Thread object used to run tests
            </summary>
        </member>
        <member name="F:NUnit.Core.TestThread.testResult">
            <summary>
            The result of the test being run
            </summary>
        </member>
        <member name="F:NUnit.Core.TestThread.thrownException">
            <summary>
            Unexpected exception thrown by test thread
            </summary>
        </member>
        <member name="M:NUnit.Core.TestThread.Run(NUnit.Core.TestResult,NUnit.Core.ITestListener,NUnit.Core.TestFilter)">
            <summary>
            Run the test, honoring any timeout value provided. If the
            timeout is exceeded, set the testresult as a failure. As
            currently implemented, the thread proc calls test.doRun,
            which handles all exceptions itself. However, for safety,
            any exception thrown is rethrown upwards.
            
            TODO: It would be cleaner to call test.Run, since that's
            part of the pubic interface, but it would require some
            restructuring of the Test hierarchy.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestThread.RunTestProc">
            <summary>
            This is the engine of this class; the actual call to test.doRun!
            Note that any thrown exception is saved for later use!
            </summary>
        </member>
        <member name="T:NUnit.Core.ThreadedTestRunner">
            <summary>
            ThreadedTestRunner overrides the Run and BeginRun methods 
            so that they are always run on a separate thread. The actual
            </summary>
        </member>
        <member name="T:NUnit.Core.SimpleTestRunner">
            <summary>
            SimpleTestRunner is the simplest direct-running TestRunner. It
            passes the event listener interface that is provided on to the tests
            to use directly and does nothing to redirect text output. Both
            Run and BeginRun are actually synchronous, although the client
            can usually ignore this. BeginRun + EndRun operates as expected.
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.runnerID">
            <summary>
            Identifier for this runner. Must be unique among all
            active runners in order to locate tests. Default
            value of 0 is adequate in applications with a single
            runner or a non-branching chain of runners.
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.test">
            <summary>
            The loaded test suite
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.builder">
            <summary>
            The builder we use to load tests, created for each load
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.testResult">
            <summary>
            Results from the last test run
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.runThread">
            <summary>
            The thread on which Run was called. Set to the
            current thread while a run is in process.
            </summary>
        </member>
        <member name="M:NUnit.Core.SimpleTestRunner.Load(NUnit.Core.TestPackage)">
            <summary>
            Load a TestPackage
            </summary>
            <param name="package">The package to be loaded</param>
            <returns>True on success, false on failure</returns>
        </member>
        <member name="M:NUnit.Core.SimpleTestRunner.Unload">
            <summary>
            Unload all tests previously loaded
            </summary>
        </member>
        <member name="M:NUnit.Core.SimpleTestRunner.Wait">
            <summary>
            Wait is a NOP for SimpleTestRunner
            </summary>
        </member>
        <member name="P:NUnit.Core.SimpleTestRunner.TestResult">
            <summary>
            Results from the last test run
            </summary>
        </member>
        <member name="T:NUnit.Core.TestSuiteBuilder">
            <summary>
            TestSuiteBuilder builds a test suite from one or more assemblies 
            specified in a TestPackage.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestSuiteBuilder.Build(NUnit.Core.TestPackage)">
            <summary>
            Build a suite based on a TestPackage
            </summary>
            <param name="package">The TestPackage</param>
            <returns>A TestSuite</returns>
        </member>
        <member name="P:NUnit.Core.TestSuiteBuilder.AssemblyInfo">
            <summary>
            Gets information about all loaded assemblies
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitConfiguration">
            <summary>
            Provides static methods for accessing the NUnit config
            file 
            </summary>
        </member>
        <member name="M:NUnit.Core.NUnitConfiguration.#cctor">
            <summary>
            Class constructor initializes fields from config file
            </summary>
        </member>
    </members>
</doc>
